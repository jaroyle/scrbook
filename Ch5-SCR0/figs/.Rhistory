library("scrbook")
data(wolverine)
traps<-wolverine$wtraps
y3d <-SCR23darray(wolverine$wcaps,wolverine$wtraps)
# this takes 341 seconds on a standard CPU circa 2011
unix.time(out<-wolvSCR0(y3d,traps,nb=1000,ni=2000,buffer=1,M=100,keepz=TRUE))
Sx<-out$sims.list$s[,,1]
Sy<-out$sims.list$s[,,2]
w<- out$sims.list$z
obj<-list(Sx=Sx,Sy=Sy,z=w)
SCRdensity(obj)
allx<-Sx[1:length(Sx)]
ally<-Sy[1:length(Sy)]
plot(allx,ally,pch=" ")
points(Sx[,1],Sy[,1],pch=".")
 SCRdensity<-function (obj, nx = 30, ny = 30, Xl = NULL, Xu = NULL, Yl = NULL, 
    Yu = NULL, scalein = 100, scaleout = 100, col="gray",ncolors = 10,whichguy=NULL) 
{
    Sxout <- obj$Sx
    Syout <- obj$Sy
    z <- obj$z
    niter <- nrow(z)
    if (is.null(Xl)) {
        Xl <- min(Sxout) * 0.999
        Xu <- max(Sxout) * 1.001
        Yl <- min(Syout) * 0.999
        Yu <- max(Syout) * 1.001
    }
    xg <- seq(Xl, Xu, , nx)
    yg <- seq(Yl, Yu, , ny)
guy<-col(Sxout)
    Sxout <- cut(Sxout[z == 1], breaks = xg)
    Syout <- cut(Syout[z == 1], breaks = yg)
if(is.null(whichguy)){
    Dn <- table(Sxout, Syout)/niter
    area <- (yg[2] - yg[1]) * (xg[2] - xg[1]) * scalein
    Dn <- (Dn/area) * scaleout
}
else{
    Dn<-table(Sxout[guy==whichguy],Syout[guy==whichguy] )/niter
}
    cat("mean: ", mean(Dn), fill = TRUE)
    par(mar = c(3, 3, 3, 6))
 if (col == "gray") {
        cc <- seq(3, 17, , 10)/20
        cc <- rev(gray(cc))
    }
    else cc <- terrain.colors(ncolors)
    image(xg, yg, Dn, col = cc)
    image.scale(Dn, col = cc)
    box()
    return(list(grid = cbind(xg, yg), Dn = Dn))
}
par(mfrow=c(1,1),mar=c(2,2,2,6))
X<-wolverine$wtraps[,2:3]
X[,1]<-(X[,1]-min(X[,1]))/10000
X[,2]<-(X[,2]-min(X[,2]))/10000
SCRdensity(obj,whichguy=1)
points(X,pch=20,cex=1,col="white")
points(X[30,],pch=1,cex=2,col="black")
png("wolv_post_s.png",width=5.25,height=5.25, units="in", res=400)
par(mfrow=c(1,1),mar=c(2,2,2,6))
X<-wolverine$wtraps[,2:3]
X[,1]<-(X[,1]-min(X[,1]))/10000
X[,2]<-(X[,2]-min(X[,2]))/10000
SCRdensity(obj,whichguy=1)
points(X,pch=20,cex=1,col="white")
points(X[30,],pch=1,cex=2,col="black")
dev.off()
SCRdensity(obj)
points(Sx[,1],Sy[,1],pch=".")
points(X,pch=20,cex=1,col="white")
points(X[30,],pch=1,cex=2,col="black")
library("scrbook")
data(wolverine)
traps<-wolverine$wtraps
y3d <-SCR23darray(wolverine$wcaps,wolverine$wtraps)
g<-as.matrix(wolverine$grid2)
SCRsmy(y3d)
Sgrid<-g
traplocs<-as.matrix(traps[,2:3])
mingridx<-min(traplocs[,1])
mingridy<-min(traplocs[,2])
traplocs[,1]<-traplocs[,1] -min(traplocs[,1])
traplocs[,2]<-traplocs[,2]- min(traplocs[,2])
traplocs<-traplocs/10000 ###units of 10 km
## set the state-space
ntraps<- nrow(traplocs)
MASK<-traps[,4:ncol(traps)]
ndays<-apply(MASK,1,sum)
Sgrid[,1]<-Sgrid[,1]-mingridx
Sgrid[,2]<-Sgrid[,2]-mingridy
Sgrid<-Sgrid/10000 # units of 10 km
Dmat<-e2dist(traplocs,Sgrid)
probs<-rep(1/nrow(Sgrid),nrow(Sgrid))
# posterior means of parameters for the 2km state-space
p0<- 0.05
sigma<- 0.62
D<-e2dist(traplocs,Sgrid)
netp<- rep(NA,nrow(Sgrid))
for(i in 1:nrow(Sgrid)){
 d2<- (traplocs[,1]-Sgrid[i,1])^2 + (traplocs[,2]-Sgrid[i,2])^2
pvec<-  p0*exp(-(1/(2*sigma*sigma))*d2)
 netp[i]<- 1-prod( (1-pvec)^ndays )  # prob of being caught in any trap
}
y<-netp
x<-Sgrid
par(mar=c(3,3,3,6))
plot(x,pch=" ")
    nc <- as.numeric(cut(y, 10))
   # if (col == "gray") {
    #    cc <- seq(3, 17, , 10)/20
   #     cc <- gray(cc)
    #}
   cc <- topo.colors(10)
    points(x, pch = 20, col = cc[nc], cex = 1)
    image.scale(y, col = cc)
wolvESA<-function(noargs=TRUE){
library("scrbook")
data(wolverine)
traps<-wolverine$wtraps
y3d <-SCR23darray(wolverine$wcaps,wolverine$wtraps)
g<-as.matrix(wolverine$grid2)
SCRsmy(y3d)
Sgrid<-g
traplocs<-as.matrix(traps[,2:3])
mingridx<-min(traplocs[,1])
mingridy<-min(traplocs[,2])
traplocs[,1]<-traplocs[,1] -min(traplocs[,1])
traplocs[,2]<-traplocs[,2]- min(traplocs[,2])
traplocs<-traplocs/10000 ###units of 10 km
## set the state-space
ntraps<- nrow(traplocs)
MASK<-traps[,4:ncol(traps)]
ndays<-apply(MASK,1,sum)
Sgrid[,1]<-Sgrid[,1]-mingridx
Sgrid[,2]<-Sgrid[,2]-mingridy
Sgrid<-Sgrid/10000 # units of 10 km
Dmat<-e2dist(traplocs,Sgrid)
probs<-rep(1/nrow(Sgrid),nrow(Sgrid))
# posterior means of parameters for the 2km state-space
p0<- 0.05
sigma<- 0.62
D<-e2dist(traplocs,Sgrid)
netp<- rep(NA,nrow(Sgrid))
for(i in 1:nrow(Sgrid)){
 d2<- (traplocs[,1]-Sgrid[i,1])^2 + (traplocs[,2]-Sgrid[i,2])^2
pvec<-  p0*exp(-(1/(2*sigma*sigma))*d2)
 netp[i]<- 1-prod( (1-pvec)^ndays )  # prob of being caught in any trap
}
y<-netp
x<-Sgrid
par(mar=c(3,3,3,6))
plot(x,pch=" ")
    nc <- as.numeric(cut(y, 10))
   # if (col == "gray") {
    #    cc <- seq(3, 17, , 10)/20
   #     cc <- gray(cc)
    #}
   cc <- topo.colors(10)
    points(x, pch = 20, col = cc[nc], cex = 1)
    image.scale(y, col = cc)
}
wolvESA
wolvESA()
dump("wolvESA","wolvESA.R")
prompt(wolvESA)
names(out)
save.image()
library("secr")
?secr
signalCH
summary(signalCH)
help(signalCH)
?ovensong
